import '@testing-library/jest-dom/extend-expect';
import reducer, {
  initialState,
  setPassword,
  setActivePage,
  setDonePage,
  setCheckPolicy,
  setResponseApi,
  cleanData,
  resetPassword,
} from './index';

test('should update state password, repeatPassword and track like form page', () => {
  expect(
    reducer(
      initialState,
      setPassword({
        password: 'Hola12345',
        repeatPassword: 'Hola12345',
        track: 'Recordatorio',
      })
    )
  ).toEqual({
    ...initialState,
    password: 'Hola12345',
    repeatPassword: 'Hola12345',
    track: 'Recordatorio',
  });
});

test('should update state activePage 2', () => {
  expect(reducer(initialState, setActivePage(2))).toEqual({
    ...initialState,
    activePage: 2,
  });
});

test('should update state page 0 to done', () => {
  expect(
    reducer(
      initialState,
      setDonePage({
        page: 0,
        done: true,
      })
    )
  ).toEqual({
    ...initialState,
    pages: [
      {
        done: true,
        text: 'âœ“',
      },
      {
        done: false,
        text: '2',
      },
      {
        done: false,
        text: '3',
      },
    ],
  });
});

test('should update state policyChecked with true', () => {
  expect(reducer(initialState, setCheckPolicy(true))).toEqual({
    ...initialState,
    policyChecked: true,
  });
});

test('should update state responseApi to the generated by api', () => {
  expect(reducer(initialState, setResponseApi(200))).toEqual({
    ...initialState,
    responseApi: 200,
  });
});

test('should reset state to incialState', () => {
  expect(reducer(initialState, cleanData())).toEqual({
    ...initialState,
  });
});

test('should reset form state to initial state', () => {
  expect(reducer(initialState, resetPassword())).toEqual({
    ...initialState,
  });
});
